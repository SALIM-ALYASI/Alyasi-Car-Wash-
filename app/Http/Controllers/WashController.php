<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Appointment;
use App\Models\WashStatus;
use Illuminate\Support\Facades\Http;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Support\Facades\Log;


class WashController extends Controller
{
    // ุนุฑุถ ุตูุญุฉ ุฅุฏุฎุงู ุงูุฑูุฒ
    public function start($id, Request $request)
    {
        // ุชุญูู ูู ุตุญุฉ ุงูุญุฌุฒ ููุท ุจุงููุนุฑู
        $appointment = Appointment::find($id);

        if (!$appointment) {
            return view('wash.invalid');
        }

        return view('wash.enter_pin', compact('appointment'));
    }

    // ุงูุชุญูู ูู ุงูุฑูุฒ ุงูุณุฑู
    public function verify($id, Request $request)
    {
        $pin = $request->input('pin');

        // ุฑูุฒ ุณุฑู ุซุงุจุช (ูููู ูุถุนู ูู env)
        $correctPin = env('WASH_SECRET_PIN', '1234');

        if ($pin !== $correctPin) {
            return back()->withErrors(['pin' => 'โ ุงูุฑูุฒ ุบูุฑ ุตุญูุญ']);
        }

        // ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ุฅูู ููุฌุฒ
        $appointment = Appointment::findOrFail($id);
        $appointment->status = 'done';
        $appointment->save();

        return view('wash.start', compact('appointment'));
    }

 public function sendInvoice($id)
{
    $appointment = Appointment::with('washType','client')->findOrFail($id);
    // ุฅูุดุงุก PDF ูุญูุธู
    $pdfPath = storage_path("app/public/invoices/invoice_{$appointment->id}.pdf");
    if (!file_exists($pdfPath)) {
        $pdf = Pdf::loadView('invoices.receipt', compact('appointment'));
        $pdf->save($pdfPath);
    }

    // ุญูุธ ุฃู ุชุญุฏูุซ ุฑูู ุงููุงุชูุฑุฉ
    $invoice = $appointment->invoice ?: new \App\Models\Invoice();
    $invoice->appointment_id = $appointment->id;
    $invoice->pdf_path = "invoices/invoice_{$appointment->id}.pdf";
    $invoice->status = 'sent';
    $invoice->amount = null;
    $invoice->save();

    // ุฅุนุฏุงุฏ ุฑุณุงูุฉ ูุงุชุณุงุจ
    $invoiceUrl = route('wash.invoice.show', $appointment->id);
    $phone = $appointment->client->phone;
    $message = "๐ ุงููุงุชูุฑุฉ ูุฎุฏูุฉ ({$appointment->washType->name_ar})\n๐ ูุดุงูุฏุชูุง ููุง: {$invoiceUrl}";
// dd($phone);
    try {
        $response = Http::post('http://31.97.71.89:3002/send-message', [
            'phone' => $phone,
            'message' => $message
        ]);
        if ($response->failed()) {
            Log::error("ูุดู ุฅุฑุณุงู ุงููุงุชูุฑุฉ ุนุจุฑ API: " . $response->body());
            return response()->json([
                'status' => 'error',
                'message' => 'ูุดู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุนุจุฑ ูุงุชุณุงุจ.'
            ], 500);
        }
    } catch (\Exception $e) {
        Log::error("ุชุนุฐูุฑ ุงูุงุชุตุงู ุจุฎุงุฏู ุงูุฅุฑุณุงู: " . $e->getMessage());
        return response()->json([
            'status' => 'error',
            'message' => 'ุชุนุฐุฑ ุงูุงุชุตุงู ุจุฎุงุฏู ุงูุฅุฑุณุงู.'
        ], 500);
    }

    return response()->json([
        'status' => 'success',
        'message' => 'ุชู ุฅุฑุณุงู ุงููุงุชูุฑุฉ ููุนููู ุจูุฌุงุญ.'
    ]);
}



    public function showInvoice($id)
    {
        $appointment = Appointment::with('washType', 'client')->findOrFail($id);
        return view('invoices.receipt', compact('appointment'));
    }
}
// ๐ ุงููุงุชูุฑุฉ ูุฎุฏูุฉ (ุบุณูู ุฎุงุฑุฌู)
// ๐ ูุดุงูุฏุชูุง ููุง: http://127.0.0.1:8000/invoice/4